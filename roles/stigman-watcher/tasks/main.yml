---
- name: Validate parameters
  ansible.builtin.assert:
    that:
      - watcher_home is defined
      - watcher_service_user is defined
      - watcher_dest is defined
      - watcher_archive is defined
      - watcher_download_url is defined
      - watcher_pkg is defined
      - watcher_version is defined
      - watcher_auth_strategy in ["client_id", "client_key"]
    quiet: true
  tags:
    - watcher

- name: Check for an existing deployment
  become: true
  ansible.builtin.stat:
    path: "{{ watcher.home }}"
  register: existing_deploy
  tags:
    - watcher

- name: "Create {{ watcher.service_name }} service user/group"
  become: true
  ansible.builtin.user:
    name: "{{ watcher.service_user }}"
    home: "{{ watcher_installdir }}"
    system: true
    create_home: false
  tags:
    - watcher

- name: "Create {{ watcher.service_name }} install location"
  become: true
  ansible.builtin.file:
    dest: "{{ watcher_installdir }}"
    state: directory
    owner: "{{ watcher.service_user }}"
    group: "{{ watcher.service_group }}"
    mode: '0750'
  tags:
    - watcher

- name: Create directory for ansible custom facts
  become: true
  ansible.builtin.file:
    state: directory
    recurse: true
    path: /etc/ansible/facts.d
  tags:
    - watcher

## check remote archive
- name: Set download archive path
  ansible.builtin.set_fact:
    archive: "{{ watcher_dest }}/{{ watcher.bundle }}"
  tags:
    - watcher

- name: Check download archive path
  become: true
  ansible.builtin.stat:
    path: "{{ archive }}"
  register: archive_path
  tags:
    - watcher

## download to controller
- name: Check local download archive path
  ansible.builtin.stat:
    path: "{{ lookup('env', 'PWD') }}"
  register: local_path
  delegate_to: localhost
  run_once: true
  become: false
  tags:
    - watcher

- name: Download stigman watcher archive
  ansible.builtin.get_url: # noqa risky-file-permissions delegated, uses controller host user
    url: "{{ watcher_download_url }}"
    dest: "{{ local_path.stat.path }}/{{ watcher.bundle }}"
    mode: '0640'
  delegate_to: localhost
  become: false
  run_once: true
  when:
    - archive_path is defined
    - archive_path.stat is defined
    - not archive_path.stat.exists
    - not watcher.offline_install
  tags:
    - watcher
  
- name: Check downloaded archive
  ansible.builtin.stat:
    path: "{{ local_path.stat.path }}/{{ watcher.bundle }}"
  register: local_archive_path
  delegate_to: localhost
  become: false
  run_once: true
  tags:
    - watcher

## copy and unpack
- name: Copy archive to target nodes
  ansible.builtin.copy:
    src: "{{ local_path.stat.path }}/{{ watcher.bundle }}"
    dest: "{{ archive }}"
    owner: "{{ watcher.service_user }}"
    group: "{{ watcher.service_group }}"
    mode: '0640'
  register: new_version_downloaded
  when:
    - not archive_path.stat.exists
    - local_archive_path.stat is defined
    - local_archive_path.stat.exists
  become: true
  tags:
    - watcher

- name: "Check target directory for: {{ watcher.home }}/stig-manager-linuxstatic/"
  ansible.builtin.stat:
    path: "{{ watcher.home }}/stig-manager-linuxstatic"
  register: path_to_linuxstatic
  become: true
  tags:
    - watcher

- name: "Extract stigman watcher archive on target" # noqa no-handler need to run this here
  ansible.builtin.unarchive:
    remote_src: true
    src: "{{ archive }}"
    dest: "{{ watcher_installdir }}"
    creates: "{{ watcher.home }}/logs/"
    owner: "{{ watcher.service_user }}"
    group: "{{ watcher.service_group }}"
    extra_opts:
      - --strip-components=1
  become: true
  when:
    - (not path_to_linuxstatic.stat.exists) or new_version_downloaded.changed
  tags:
    - watcher

- name: Inform decompression was not executed
  ansible.builtin.debug:
    msg: "{{ watcher.home }} already exists and version unchanged, skipping decompression"
  when:
    - (not new_version_downloaded.changed) and path_to_linuxstatic.stat.exists
  tags:
    - watcher

- name: "Generating JWT Keys and Certificates"
  ansible.builtin.include_tasks: jwt.yml
  tags:
    - watcher
    - jwt
  when:
    - watcher_auth_strategy == "client_key"

- name: Create STIG-Manager Watcher symbolic link 
  file:
   src: "{{ watcher_home }}"
   dest: "{{ watcher_symlink }}"
   state: link
  when:
    - watcher_home is defined
  tags:
    - watcher

- name: Include systemd tasks
  ansible.builtin.include_tasks: systemd.yml
  tags:
    - watcher

- name: Remove STIG-Manager Watcher package
  ignore_errors: yes
  become: true
  file:
    path: "{{ archive }}"
    state: absent
  tags:
    - watcher

- name: Flush pending handlers
  ansible.builtin.meta: flush_handlers
  tags:
    - always


